// Code generated by hertz generator.

package api

import (
	"context"
	"log"

	"github.com/1359332949/douyin/cmd/api/biz/model/api"
	// "github.com/1359332949/douyin/cmd/api/biz/mw"
	"github.com/1359332949/douyin/cmd/api/biz/rpc"
	"github.com/1359332949/douyin/kitex_gen/message"
	"github.com/1359332949/douyin/pkg/consts"
	"github.com/1359332949/douyin/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
)

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MessageChatRequest
	err = c.BindAndValidate(&req)
	
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(consts.IdentityKey)
	messages, err := rpc.MessageChat(context.Background(), &message.MessageChatRequest{
		FromUserId: v.(*api.User).ID,
		Token: req.Token,
		ToUserId: req.ToUserID,

	})
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	// SendResponse(c, errno.Success, nil)
	Err := errno.ConvertErr(errno.Success)
	c.JSON(200, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"message_list":  messages,
	})
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	v, _ := c.Get(consts.IdentityKey)
	if req.ActionType != 1{
		SendResponse(c, errno.Success, nil)
		return
	}
	err = rpc.MessageAction(context.Background(), &message.MessageActionRequest{
		FromUserId:  v.(*api.User).ID,
		Token: req.Token,
		ToUserId: req.ToUserID,
		ActionType: req.ActionType,
		Content: req.Content,

	})
	log.Println("hz----------------------------", req.ToUserID)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	// log.Println("hz----------------------------", req.ToUserID)
	SendResponse(c, errno.Success, nil)
}
