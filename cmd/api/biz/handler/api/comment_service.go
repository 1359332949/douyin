// Code generated by hertz generator.

package api

import (
	
	"context"
	// "fmt"
	"github.com/1359332949/douyin/cmd/api/biz/model/api"
	// "github.com/1359332949/douyin/cmd/api/biz/mw"
	"github.com/1359332949/douyin/cmd/api/biz/rpc"
	"log"
	"github.com/1359332949/douyin/kitex_gen/comment"
	// "github.com/1359332949/douyin/kitex_gen/message"
	"github.com/1359332949/douyin/pkg/consts"
	"github.com/1359332949/douyin/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	// "path/filepath"
)

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id TODO middleware中处理
	u, _ := c.Get(consts.IdentityKey)
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	//越权错误
	if req.UserID != 0 && req.UserID != u.(*api.User).ID {
		SendResponse(c, errno.BrokenAccessControlErr, nil)
		return
	}
	resp, err := rpc.CommentAction(ctx, &comment.CommentActionRequest{
		UserId:      u.(*api.User).ID,
		Token:       req.Token,
		VideoId:     req.VideoID,
		ActionType:  req.ActionType,
		CommentText: req.CommentText,
		CommentId:   req.CommentID,
	})
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code": Err.ErrCode,
		"status_msg":  Err.ErrMsg,
		"comment":     resp,
	})
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	
	var err error
	var req api.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendResponse(c, errno.ConvertErr(err), nil)
		return
	}
	//从token中获取id TODO middleware中处理
	u, _ := c.Get(consts.IdentityKey)
	if u == nil {
		SendResponse(c, errno.Token2UserIdErr, nil)
		return
	}
	log.Println("-------------------------hertz--CommentList-------------------------------------")
	log.Println("------------------------userid:  " ,u,"-------------------------------------")
	resp, err := rpc.CommentList(ctx, &comment.CommentListRequest{
		Token:   req.Token,
		VideoId: req.VideoID,
		UserId: u.(*api.User).ID,
	})
	Err := errno.ConvertErr(errno.Success)
	c.JSON(consts.StatusOK, utils.H{
		"status_code":  Err.ErrCode,
		"status_msg":   Err.ErrMsg,
		"comment_list": resp,
	})
}
